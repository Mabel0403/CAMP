import math
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.distributed.nn
from torch.autograd import Variable
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def get_heartmap_pool(part_features, blocks=3, add_global=False, otherbranch=False):
    # 输入是24 144 1024
    # 需要得到的输出是24 1024 3
    heatmap = torch.mean(part_features, dim=-1)         # 把1024都压扁了
    size = part_features.size(1)    # size=144
    arg = torch.argsort(heatmap, dim=1, descending=True)
    x_sort = [part_features[i, arg[i], :] for i in range(part_features.size(0))]
    x_sort = torch.stack(x_sort, dim=0)

    # -- 按照地物自动聚类的类别数来将16*16的区域进行分类

    split_each = size / blocks
    split_list = [int(split_each) for i in range(blocks - 1)]
    split_list.append(size - sum(split_list))
    split_x = x_sort.split(split_list, dim=1)

    split_list = [torch.mean(split, dim=1) for split in split_x]
    part_featuers_ = torch.stack(split_list, dim=2)

    return part_featuers_


class blocks_InfoNCE(nn.Module):

    def __init__(self, loss_function, device='cuda' if torch.cuda.is_available() else 'cpu'):
        super().__init__()
        self.loss_function = loss_function
        self.device = device
        # self.pos_embed = nn.Parameter(torch.zeros(1, 144, 1024))
        # self.pos_embed = torch.tensor(self.pos_embed)
        # trunc_normal_(self.pos_embed, std=.02)

    def forward(self, image_features1, image_features2, logit_scale, weights, blocks=3):

        image_features1_flatten = image_features1.view(image_features1.size(0), image_features1.size(1), -1).transpose(
            -2, -1)             # 24 144 1024
        image_features2_flatten = image_features2.view(image_features2.size(0), image_features2.size(1), -1).transpose(
            -2, -1)             # 24 144 1024

        # image_features1_flatten = image_features1_flatten + self.pos_embed * 2
        # image_features2_flatten = image_features2_flatten + self.pos_embed * 2

        # 需要在get_heartmap_pool里面得到 24 1024 3
        heat_result_1 = get_heartmap_pool(image_features1_flatten, blocks)      # 24 1024 3
        heat_result_2 = get_heartmap_pool(image_features2_flatten, blocks)

        # 1. concate
        if 1:
            channels1 = [heat_result_1[:, :, i] for i in range(heat_result_1.shape[2])]
            channels2 = [heat_result_2[:, :, i] for i in range(heat_result_2.shape[2])]

            # 使用 torch.cat 连接所有通道
            image_features_blocks_1 = torch.cat(channels1, dim=-1)
            image_features_blocks_2 = torch.cat(channels2, dim=-1)

            # image_features_blocks_1 = torch.cat((heat_result_1[:, :, 0], heat_result_1[:, :, 1], heat_result_1[:, :, 2]),
            #                                     dim=-1)
            # image_features_blocks_2 = torch.cat((heat_result_2[:, :, 0], heat_result_2[:, :, 1], heat_result_2[:, :, 2]),
            #                                     dim=-1)

            # image_features_blocks_1 = torch.cat((heat_result_1[:, :, 0], heat_result_1[:, :, 1]), dim=-1)
            # image_features_blocks_2 = torch.cat((heat_result_2[:, :, 0], heat_result_2[:, :, 1]), dim=-1)

            image_features1 = F.normalize(image_features_blocks_1, dim=-1)
            image_features2 = F.normalize(image_features_blocks_2, dim=-1)

            logits_per_image1 = logit_scale * image_features1 @ image_features2.T

            logits_per_image2 = logits_per_image1.T

            labels = torch.arange(len(logits_per_image1), dtype=torch.long, device=self.device)

            loss = (self.loss_function(logits_per_image1, labels) + self.loss_function(logits_per_image2, labels)) / 2


        return loss
